'''
正则表达式: 一种用来匹配字符串的强有力的武器
\d: 匹配一个数字
\w: 匹配一个字母或数字
\s: 匹配一个空格
.: 匹配任意字符
*: 表示任意个字符（包括0个）
+: 表示至少一个字符
?：表示0个或1个字符
{n}: 表示n个字符
{n,m}: 表示n-m个字符
^: 表示行的开头
$: 表示行的结束
\A: 表示字符串的开头
\Z: 表示字符串的结束
[]: 表示范围
|: 表示或
(): 表示分组
特殊字符需要转义'-' = '\-'

来看一个复杂的例子：\d{3}\s+\d{3,8}。
我们来从左到右解读一下：
\d{3}表示匹配3个数字，例如'010'；
\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
\d{3,8}表示3-8个数字，例如'1234567'

可以用[]表示范围，比如：
[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线；
[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，
也就是Python合法的变量；
[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
^表示行的开头，^\d表示必须以数字开头。
$表示行的结束，\d$表示必须以数字结束。


'''
# 1. re.match()函数用于从字符串开头匹配一个模式
import  re


'''
可以配合split()方法使用
'''
print('a b   c'.split(' '))
#使用正则表达式
print(re.split(r'\s+','a b   c'))#\s+表示至少有一个空格
print(re.split(r'[\s\,]+','a,b, c  d'))#匹配空格或者逗号  
'''
[]表示范围
[\s\,]匹配一个空格或者逗号
[\s\,]+表示至少有一个空格或者逗号
'''


'''
可以方便的提取字符串分组
^(\d{3})-(\d{3,8})$分别定义了两个组，可以直接从匹配的字符串中提取出区号和本地号码：
'''
m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
print(m.group(0))#原始字符串
print(m.group(1))#第一个分组
print(m.group(2))#第二个分组